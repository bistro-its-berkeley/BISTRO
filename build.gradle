import com.amazonaws.services.lambda.model.InvocationType
import jp.classmethod.aws.reboot.gradle.lambda.AWSLambdaInvokeTask

buildscript {
    repositories {
        //jcenter()
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        //maven { url "https://jitpack.io" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: 'kr.motd.gradle', name: 'sphinx-gradle-plugin', version: '1.0.3.Final'
        classpath "jp.classmethod.aws.reboot:gradle-aws-plugin-reboot:0.45"
        //classpath "jp.classmethod.aws:gradle-aws-plugin:0.35"
        classpath "com.github.viswaramamoorthy:gradle-util-plugins:0.1.0-RELEASE"
        classpath 'cz.alenkacz:gradle-scalafmt:1.7.0'
        classpath 'com.bmuschko:gradle-docker-plugin:6.6.1' //update from 3.6.1
        classpath 'org.json4s:json4s-core_2.9.1-1:3.1.0'
        //classpath 'com.github.debasishg:scala-redis:3.9'
        classpath 'com.github.seratch:awscala_2.13:0.8.5'
    }
}

plugins {
    id "net.ltgt.apt" version "0.21" // downgrade from 0.5
//    id "org.scoverage" version "2.5.0"
    id "de.undercouch.download" version "3.2.0"
    //new:
    id "org.scoverage" version "5.0.0"
    id 'maven-publish'
    id "me.champeau.gradle.jmh" version "0.5.3"
    id 'com.bmuschko.docker-java-application' version '6.6.1'
    id "cz.alenkacz.gradle.scalafmt" version "1.16.2"
}

// Plugins
apply plugin: 'java'
apply plugin: 'scala'
//apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'kr.motd.sphinx'
apply plugin: 'application'
apply plugin: 'ManifestClasspath'
apply plugin: 'scalafmt'
apply plugin: 'com.bmuschko.docker-java-application'

// Project info

group 'beam'
version '0.0.4.5.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// Version Vars
compileScala.options.encoding = 'UTF-8'
def scalaBinaryVersion = "2.12"

sourceSets.main.scala.srcDirs = ["src/main/scala", "src/main/java"]
sourceSets.main.java.srcDirs = []

sourceSets.test.java.srcDirs = []
sourceSets.test.scala.srcDirs = ["src/test/scala", "src/test/java"]

if (project.hasProperty('env')) {
    sourceSets {
        main {
            resources {
                srcDirs "src/main/resources", "test/input/" + project.getProperty('env')
            }
        }
    }
}


allprojects {
    repositories {
        mavenLocal()
        maven {
            url "https://repo1.maven.org/maven2"
            content{
                excludeModule("javax.media", "jai_core")
            }
        }
        // Used for graphql-java and matsim.contrib.decongestion specific versions -
        maven {
            url "http://beam-bintray-needed-releases.s3-website.us-east-2.amazonaws.com/"
            allowInsecureProtocol = true
        }
        maven { url "https://repo.osgeo.org/repository/release/" }
        maven { url "https://download.osgeo.org/webdav/geotools" }
        maven { url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases" }
        maven { url "https://central.maven.org/maven2" }
        maven { url "https://repo.maven.apache.org/maven2" }
        maven { url "https://repo.matsim.org/repository/matsim" }
        maven { url "https://maven.conveyal.com/" }
        maven { url "https://download.java.net/maven/2/" }
        maven { url "https://people.apache.org/repo/m1-ibiblio-rsync-repository/org.apache.axis2/" }
        maven { url "https://maven.geo-solutions.it" }
        maven {
            url "http://nexus.onebusaway.org/content/groups/public/"
            allowInsecureProtocol = true
        }
        //jcenter()
        maven { url "https://jitpack.io" }
        mavenCentral().content {
            excludeModule("javax.media", "jai_core")
        }
    }
}
configurations {
    scalaCompilerPlugin
}


configurations.all {
    resolutionStrategy {
//       we need this in order to get Elki library working fine.
        force 'it.unimi.dsi:fastutil:8.5.4'
        force 'org.apache.logging.log4j:log4j-core:2.15.0'
        force 'org.apache.logging.log4j:log4j-api:2.15.0'
    }
    exclude group: "log4j", module: "log4j"
}

dependencies {

    ////////////////////////////////
    // Scala dependencies
    /////////////////////////////////

    // CORE Scala //
    implementation "org.scala-lang:scala-library:${scalaBinaryVersion}.13" //udpated
    implementation group: 'org.scala-lang.modules', name: "scala-xml_${scalaBinaryVersion}", version: '1.0.6'

    // Needed for using repl
    implementation "org.scala-lang:scala-compiler:2.12.13" //updated

    // BEAM
    //compile 'com.github.lbnl-ucb-sti:beam:competitions-pin_dev_merge-SNAPSHOT'
    // compile project(":beam")
    // compile 'com.github.lbnl-ucb-sti:beam:competitions-pin_dev_merge_modify-SNAPSHOT'
    implementation group: 'beam', name: 'beam', version: '0.8.6.13'

    // Validation
    implementation group: "com.wix", name: "accord-core_${scalaBinaryVersion}", version: "0.7.3"
    implementation group: "com.wix", name: "accord-scalatest_${scalaBinaryVersion}", version: "0.7.3"

    // DataFrames
    implementation "com.github.martincooper:scala-datatable_${scalaBinaryVersion}:0.8.0"

    // CSV
    implementation "com.github.tototoshi:scala-csv_${scalaBinaryVersion}:1.3.5"

    // Pretty-print tables
    implementation group: "com.github.wookietreiber", name: "scala-cli-tools_${scalaBinaryVersion}", version: "0.3.1"

    // 3rd Party Scala
    implementation "com.github.scopt:scopt_${scalaBinaryVersion}:3.7.0"

    // Geojson
    implementation group: 'de.grundid.opendatalab', name: 'geojson-jackson', version: '1.8.1'

    //Scala-Redis
    //implementation "com.github.debasishg:scala-redis:3.9"

    //AWS Scala
    implementation "com.github.seratch:awscala_2.12:0.8.5"

    implementation group: 'org.codehaus.janino', name: 'janino', version: '3.0.7'

    //better-files
    implementation "com.github.pathikrit:better-files_2.12:3.9.1"

    //Need to compile
    implementation 'org.json4s:json4s-jackson_2.12:4.0.4'
    implementation 'org.json4s:json4s-native_2.12:4.0.4'
    implementation 'org.typelevel:cats-core_2.12:2.7.0'
    implementation 'commons-io:commons-io:2.11.0'
    //Could be added from BEAM
    implementation 'org.apache.commons:commons-compress:1.18'
    implementation 'org.scala-lang.modules:scala-java8-compat_2.12:0.8.0'
    implementation(group: 'com.github.LBNL-UCB-STI', name: 'r5', version: 'v4.5.3_linkRadiusMeters') {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'com.typesafe.scala-logging:scala-logging_2.12:3.9.0'
    implementation 'com.typesafe:config:1.4.0'
    implementation 'com.google.inject:guice:4.1.0'
    implementation 'org.jfree:jfreechart:1.0.14'
    implementation(group: 'com.github.wrashid.matsim', name: 'matsim', version: '0.10.1-beam-15') {
        exclude group: 'log4j', module: 'log4j'
    }
    implementation 'com.beachape:enumeratum_2.12:1.5.12'
    implementation 'com.beachape:enumeratum-circe_2.12:1.5.14'
    implementation 'net.codingwell:scala-guice_2.12:4.1.0'

    // evilplot
//    implementation "com.cibo:evilplot_${scalaBinaryVersion}:0.8.1"
    //implementation 'io.github.cibotech:evilplot_2.12:0.8.1'
    ////////////////////////////////
    // Test compile dependencies
    /////////////////////////////////

    //testImplementation group: 'org.scalatest', name: "scalatest_${scalaBinaryVersion}", version: '3.0.5'
    //testImplementation group: 'junit', name: 'junit', version: '4.12'
    //testImplementation group: 'org.mockito', name: 'mockito-inline', version: '2.+'
    //testImplementation group: "org.mockito", name: "mockito-core", version: "2.+"
    //testImplementation group: 'org.scalacheck', name: 'scalacheck_2.12', version: '1.14+'

    testImplementation group: 'junit', name: 'junit', version: '4.8'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '2.27.0'
    testImplementation group: "org.mockito", name: "mockito-core", version: "2.+"

    // Coverage
//    scoverage "org.scoverage:scalac-scoverage-plugin_${scalaBinaryVersion}:1.3.1", "org.scoverage:scalac-scoverage-runtime_${scalaBinaryVersion}:1.3.1"

}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

docker {
    registryCredentials {
        url = 'https://index.docker.io/v1/'
        username = System.getenv("DOCKER_USER")
        password = System.getenv("DOCKER_PASSWORD")
    }

    javaApplication {
        baseImage = 'beammodel/beam-competition:accessibility-0.0.2'
        maintainer = 'Kirill Mitin "mitin.kirill.ol@gmail.com"'
        ports = [9090]
        images = ['beammodel/bistro:0.0.4.5.1-SNAPSHOT']
	mainClassName = "beam.competition.run.RunCompetition"
//        exec {
//            defaultCommand 'server'
//            entryPoint '/docker_entrypoint.sh'
//        }
    }
}
dockerSyncBuildContext {
    from('fixed-data/') {
        into('fixed-data/')
    }
    from('accessibility/') {
        into('accessibility/')
    }
    from('submission-inputs/') {
        into('submission-inputs/')
    }
    from('src/main/python/post_processing/'){
        into('src/main/python/post_processing/')
    }
    from file('docker_entrypoint.sh')
}

//dockerDistTar {
//    instruction 'RUN apt-get update && apt-get install -y redis-server && pip install boto3 lxml dask seaborn'
//    addFile 'docker_entrypoint.sh', '/docker_entrypoint.sh'
//    addFile 'submission-inputs/', 'submission-inputs/'
//    addFile 'fixed-data/', 'fixed-data/'
//    addFile 'accessibility/', 'accessibility/'
//    addFile 'src/main/python/post_processing/', 'src/main/python/post_processing/'
//    environmentVariable('GIT_HEAD', getGitHash())
//}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

task createDockerfile(type: Dockerfile, dependsOn: dockerSyncBuildContext) {
    instruction 'RUN apt-get update && apt-get install -y redis-server && pip install boto3 lxml dask seaborn'
    addFile 'docker_entrypoint.sh', '/docker_entrypoint.sh'
    addFile 'submission-inputs/', 'submission-inputs/'
    addFile 'fixed-data/', 'fixed-data/'
    addFile 'accessibility/', 'accessibility/'
    addFile 'src/main/python/post_processing/', 'src/main/python/post_processing/'
    environmentVariable('GIT_HEAD', getGitHash())
// from BEAM
    runCommand('chmod +x /app/docker_entrypoint.sh')
    entryPoint('/app/docker_entrypoint.sh')
}


task gradleBenchmark(type: Exec) {
    commandLine "time", "./gradlew", "run", '--args=--scenario sioux_faux --sample-size 1k --iters 1'
}

task dockerBenchmark(type: Exec) {
    commandLine "time", "docker", "run", "-v", "${System.getProperty("user.dir")}/submission-inputs:/submission-inputs:ro", "-v", "${System.getProperty("user.dir")}/output:/output:rw", "beammodel/beam-competition:$version", "--scenario", "sioux_faux", "--sample-size", "1k", "--iters", "1"
    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString()
    }
}


task spec(dependsOn: ['testClasses'], type: JavaExec) {
    main = 'org.scalatest.tools.Runner'
    args = ['-R', 'build/classes/scala/test', '-o', '-l', 'beam.tags.ExcludeRegular']
    classpath = sourceSets.test.runtimeClasspath
}
test.dependsOn spec

// Task to run scala tests, as Scala tests not picked up by Gradle by default.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task repl(type: JavaExec) {
    main = "scala.tools.nsc.MainGenericRunner"
    classpath = sourceSets.main.runtimeClasspath
    standardInput System.in
    args "-usejavacp"
}

/* //////////////////////////////////////////////////
*  Task to run tagged tests.
*  Note: use space separated list of tags
* ./gradlew taggedTest -Ptags="beam.tags.Performance beam.tags.Integration"
* /////////////////////////////////////////////////// */

task taggedTest(dependsOn: ['testClasses'], type: JavaExec) {
    main = 'org.scalatest.tools.Runner'

    args = ['-R', 'build/classes/scala/test', '-o', '-n'] << (project.findProperty('tags') ?: 'org.scalatest.Ignore')
    classpath = sourceSets.test.runtimeClasspath
}

task specificTest(dependsOn: ['testClasses'], type: JavaExec) {
    main = 'org.scalatest.tools.Runner'

    args = ['-R', 'build/classes/scala/test', '-o', '-s'] << (project.findProperty('suite') ?: 'org.scalatest.Ignore')
    classpath = sourceSets.test.runtimeClasspath
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Task to run tests periodically on continue integration server.
// ./gradlew  periodicTest -Pconfig=test/input/sf_light/sf_light-1k.conf -Piterations=1
////////////////////////////////////////////////////////////////////////////////////////////////////////////
task periodicTest(dependsOn: ['testClasses'], type: JavaExec) {
    main = 'org.scalatest.tools.Runner'
    args = ['-R', 'build/classes/scala/test', '-o', '-n', 'beam.tags.Periodic'] <<
            (project.hasProperty('config') ? '-Dconfig=' + project.findProperty('config') :
                    (project.hasProperty('iterations') ? '-Diterations=' + project.findProperty('iterations') : '')) <<
            (project.hasProperty('config') && project.hasProperty('iterations') ?
                    '-Diterations=' + project.findProperty('iterations') : '')
    classpath = sourceSets.test.runtimeClasspath
}


mainClassName = "beam.competition.run.RunCompetition"

task deleteSiouxFauxNetwork {
    doLast {
        if (project.file('fixed-data/sioux_faux/r5/network.dat').exists()) {
            delete 'fixed-data/sioux_faux/r5/network.dat'
        }
        if (project.file('fixed-data/sioux_faux/r5/osm.mapdb').exists()) {
            delete 'fixed-data/sioux_faux/r5/osm.mapdb'
        }
        if (project.file('fixed-data/sioux_faux/r5/osm.mapdb.p').exists()) {
            delete 'fixed-data/sioux_faux/r5/osm.mapdb.p'
        }
    }
}


//////////////////////////////////////////////////////////////////////
// Amazon WS task to run beam sim on Lambda
//////////////////////////////////////////////////////////////////////

apply plugin: "base"
apply plugin: "jp.classmethod.aws.reboot.lambda"

aws {
    profileName = "competition"
    region = "us-west-2"
}

lambda {
    region = "us-west-2"
}

def getCurrentGitBranch() {
    def gitBranch = "$defaultBranch"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
    }
    return gitBranch
}

task deploy(type: AWSLambdaInvokeTask) {
    doFirst {
        if (!project.hasProperty('runName')) {
            throw new GradleException('Please name the run by specifying `runName` argument. e.g; ./gradlew deploy -PrunName=sfbay-performance-run')
        }

        if (!project.hasProperty('runArgs')) {
            throw new GradleException('runArgs are required to deploy competition.')
        }
    }

    def pload = """{
  "title": "${project.findProperty('runName')}",
  "branch": "${project.findProperty('beamBranch') ?: getCurrentGitBranch()}",
  "commit": "${beamCommit ?: 'HEAD'}",
  "args": "${project.findProperty('runArgs')}",
  "max_ram": "${maxRAM ?: '140g'}",
  "storage_size": ${project.findProperty('storageSize')},
  "instance_type": "${project.findProperty('instanceType') ?: defaultInstanceType}",
  "region": "$region",
  "s3_publish": "${project.findProperty('s3Backup') ?: true}",
  "shutdown_wait": "$shutdownWait",
  "shutdown_behaviour": "$shutdownBehaviour"
}"""

    functionName = "simulateCompetition"
    invocationType = InvocationType.RequestResponse
    payload = pload

    doLast {
        println pload
        println new String(invokeResult.payload.array(), "UTF-8")
    }
}


def remoteDebug = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8005"]

def myAvailableRam = (System.getenv("MAXRAM") ?: (project.findProperty('maxRAM') ?: "140")).toString().replace("g", "").toInteger()
